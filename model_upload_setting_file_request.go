/*
Gridly API

Gridly API documentation

API version: 5.9.0
Contact: support@gridly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
	"os"
)

// UploadSettingFileRequest struct for UploadSettingFileRequest
type UploadSettingFileRequest struct {
	File **os.File `json:"file,omitempty"`
}

// NewUploadSettingFileRequest instantiates a new UploadSettingFileRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadSettingFileRequest() *UploadSettingFileRequest {
	this := UploadSettingFileRequest{}
	return &this
}

// NewUploadSettingFileRequestWithDefaults instantiates a new UploadSettingFileRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadSettingFileRequestWithDefaults() *UploadSettingFileRequest {
	this := UploadSettingFileRequest{}
	return &this
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *UploadSettingFileRequest) GetFile() *os.File {
	if o == nil || isNil(o.File) {
		var ret *os.File
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadSettingFileRequest) GetFileOk() (**os.File, bool) {
	if o == nil || isNil(o.File) {
    return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *UploadSettingFileRequest) HasFile() bool {
	if o != nil && !isNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given *os.File and assigns it to the File field.
func (o *UploadSettingFileRequest) SetFile(v *os.File) {
	o.File = &v
}

func (o UploadSettingFileRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.File) {
		toSerialize["file"] = o.File
	}
	return json.Marshal(toSerialize)
}

type NullableUploadSettingFileRequest struct {
	value *UploadSettingFileRequest
	isSet bool
}

func (v NullableUploadSettingFileRequest) Get() *UploadSettingFileRequest {
	return v.value
}

func (v *NullableUploadSettingFileRequest) Set(val *UploadSettingFileRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadSettingFileRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadSettingFileRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadSettingFileRequest(val *UploadSettingFileRequest) *NullableUploadSettingFileRequest {
	return &NullableUploadSettingFileRequest{value: val, isSet: true}
}

func (v NullableUploadSettingFileRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadSettingFileRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


