/*
Gridly API

Gridly API documentation

API version: 5.9.0
Contact: support@gridly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
)

// Glossary struct for Glossary
type Glossary struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Langs []string `json:"langs,omitempty"`
	Projects []GlossaryProject `json:"projects,omitempty"`
}

// NewGlossary instantiates a new Glossary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlossary() *Glossary {
	this := Glossary{}
	return &this
}

// NewGlossaryWithDefaults instantiates a new Glossary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlossaryWithDefaults() *Glossary {
	this := Glossary{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Glossary) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Glossary) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Glossary) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Glossary) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Glossary) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Glossary) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Glossary) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Glossary) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Glossary) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Glossary) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Glossary) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Glossary) SetDescription(v string) {
	o.Description = &v
}

// GetLangs returns the Langs field value if set, zero value otherwise.
func (o *Glossary) GetLangs() []string {
	if o == nil || isNil(o.Langs) {
		var ret []string
		return ret
	}
	return o.Langs
}

// GetLangsOk returns a tuple with the Langs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Glossary) GetLangsOk() ([]string, bool) {
	if o == nil || isNil(o.Langs) {
    return nil, false
	}
	return o.Langs, true
}

// HasLangs returns a boolean if a field has been set.
func (o *Glossary) HasLangs() bool {
	if o != nil && !isNil(o.Langs) {
		return true
	}

	return false
}

// SetLangs gets a reference to the given []string and assigns it to the Langs field.
func (o *Glossary) SetLangs(v []string) {
	o.Langs = v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *Glossary) GetProjects() []GlossaryProject {
	if o == nil || isNil(o.Projects) {
		var ret []GlossaryProject
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Glossary) GetProjectsOk() ([]GlossaryProject, bool) {
	if o == nil || isNil(o.Projects) {
    return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *Glossary) HasProjects() bool {
	if o != nil && !isNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []GlossaryProject and assigns it to the Projects field.
func (o *Glossary) SetProjects(v []GlossaryProject) {
	o.Projects = v
}

func (o Glossary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Langs) {
		toSerialize["langs"] = o.Langs
	}
	if !isNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	return json.Marshal(toSerialize)
}

type NullableGlossary struct {
	value *Glossary
	isSet bool
}

func (v NullableGlossary) Get() *Glossary {
	return v.value
}

func (v *NullableGlossary) Set(val *Glossary) {
	v.value = val
	v.isSet = true
}

func (v NullableGlossary) IsSet() bool {
	return v.isSet
}

func (v *NullableGlossary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlossary(val *Glossary) *NullableGlossary {
	return &NullableGlossary{value: val, isSet: true}
}

func (v NullableGlossary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlossary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


