/*
Gridly API

Gridly API documentation

API version: 5.9.0
Contact: support@gridly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
)

// ViewColumn struct for ViewColumn
type ViewColumn struct {
	Id *string `json:"id,omitempty"`
	DateTimeFormat *DateTimeFormat `json:"dateTimeFormat,omitempty"`
	DependsOn *string `json:"dependsOn,omitempty"`
	Description *string `json:"description,omitempty"`
	Editable *bool `json:"editable,omitempty"`
	Formula *Formula `json:"formula,omitempty"`
	IsSource *bool `json:"isSource,omitempty"`
	IsTarget *bool `json:"isTarget,omitempty"`
	LanguageCode *string `json:"languageCode,omitempty"`
	LocalizationType *string `json:"localizationType,omitempty"`
	Name *string `json:"name,omitempty"`
	NumberFormat *NumberFormat `json:"numberFormat,omitempty"`
	Reference *ColumnReference `json:"reference,omitempty"`
	SelectionOptions []string `json:"selectionOptions,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewViewColumn instantiates a new ViewColumn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewColumn() *ViewColumn {
	this := ViewColumn{}
	return &this
}

// NewViewColumnWithDefaults instantiates a new ViewColumn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewColumnWithDefaults() *ViewColumn {
	this := ViewColumn{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewColumn) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewColumn) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewColumn) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ViewColumn) SetId(v string) {
	o.Id = &v
}

// GetDateTimeFormat returns the DateTimeFormat field value if set, zero value otherwise.
func (o *ViewColumn) GetDateTimeFormat() DateTimeFormat {
	if o == nil || isNil(o.DateTimeFormat) {
		var ret DateTimeFormat
		return ret
	}
	return *o.DateTimeFormat
}

// GetDateTimeFormatOk returns a tuple with the DateTimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewColumn) GetDateTimeFormatOk() (*DateTimeFormat, bool) {
	if o == nil || isNil(o.DateTimeFormat) {
    return nil, false
	}
	return o.DateTimeFormat, true
}

// HasDateTimeFormat returns a boolean if a field has been set.
func (o *ViewColumn) HasDateTimeFormat() bool {
	if o != nil && !isNil(o.DateTimeFormat) {
		return true
	}

	return false
}

// SetDateTimeFormat gets a reference to the given DateTimeFormat and assigns it to the DateTimeFormat field.
func (o *ViewColumn) SetDateTimeFormat(v DateTimeFormat) {
	o.DateTimeFormat = &v
}

// GetDependsOn returns the DependsOn field value if set, zero value otherwise.
func (o *ViewColumn) GetDependsOn() string {
	if o == nil || isNil(o.DependsOn) {
		var ret string
		return ret
	}
	return *o.DependsOn
}

// GetDependsOnOk returns a tuple with the DependsOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewColumn) GetDependsOnOk() (*string, bool) {
	if o == nil || isNil(o.DependsOn) {
    return nil, false
	}
	return o.DependsOn, true
}

// HasDependsOn returns a boolean if a field has been set.
func (o *ViewColumn) HasDependsOn() bool {
	if o != nil && !isNil(o.DependsOn) {
		return true
	}

	return false
}

// SetDependsOn gets a reference to the given string and assigns it to the DependsOn field.
func (o *ViewColumn) SetDependsOn(v string) {
	o.DependsOn = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ViewColumn) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewColumn) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ViewColumn) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ViewColumn) SetDescription(v string) {
	o.Description = &v
}

// GetEditable returns the Editable field value if set, zero value otherwise.
func (o *ViewColumn) GetEditable() bool {
	if o == nil || isNil(o.Editable) {
		var ret bool
		return ret
	}
	return *o.Editable
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewColumn) GetEditableOk() (*bool, bool) {
	if o == nil || isNil(o.Editable) {
    return nil, false
	}
	return o.Editable, true
}

// HasEditable returns a boolean if a field has been set.
func (o *ViewColumn) HasEditable() bool {
	if o != nil && !isNil(o.Editable) {
		return true
	}

	return false
}

// SetEditable gets a reference to the given bool and assigns it to the Editable field.
func (o *ViewColumn) SetEditable(v bool) {
	o.Editable = &v
}

// GetFormula returns the Formula field value if set, zero value otherwise.
func (o *ViewColumn) GetFormula() Formula {
	if o == nil || isNil(o.Formula) {
		var ret Formula
		return ret
	}
	return *o.Formula
}

// GetFormulaOk returns a tuple with the Formula field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewColumn) GetFormulaOk() (*Formula, bool) {
	if o == nil || isNil(o.Formula) {
    return nil, false
	}
	return o.Formula, true
}

// HasFormula returns a boolean if a field has been set.
func (o *ViewColumn) HasFormula() bool {
	if o != nil && !isNil(o.Formula) {
		return true
	}

	return false
}

// SetFormula gets a reference to the given Formula and assigns it to the Formula field.
func (o *ViewColumn) SetFormula(v Formula) {
	o.Formula = &v
}

// GetIsSource returns the IsSource field value if set, zero value otherwise.
func (o *ViewColumn) GetIsSource() bool {
	if o == nil || isNil(o.IsSource) {
		var ret bool
		return ret
	}
	return *o.IsSource
}

// GetIsSourceOk returns a tuple with the IsSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewColumn) GetIsSourceOk() (*bool, bool) {
	if o == nil || isNil(o.IsSource) {
    return nil, false
	}
	return o.IsSource, true
}

// HasIsSource returns a boolean if a field has been set.
func (o *ViewColumn) HasIsSource() bool {
	if o != nil && !isNil(o.IsSource) {
		return true
	}

	return false
}

// SetIsSource gets a reference to the given bool and assigns it to the IsSource field.
func (o *ViewColumn) SetIsSource(v bool) {
	o.IsSource = &v
}

// GetIsTarget returns the IsTarget field value if set, zero value otherwise.
func (o *ViewColumn) GetIsTarget() bool {
	if o == nil || isNil(o.IsTarget) {
		var ret bool
		return ret
	}
	return *o.IsTarget
}

// GetIsTargetOk returns a tuple with the IsTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewColumn) GetIsTargetOk() (*bool, bool) {
	if o == nil || isNil(o.IsTarget) {
    return nil, false
	}
	return o.IsTarget, true
}

// HasIsTarget returns a boolean if a field has been set.
func (o *ViewColumn) HasIsTarget() bool {
	if o != nil && !isNil(o.IsTarget) {
		return true
	}

	return false
}

// SetIsTarget gets a reference to the given bool and assigns it to the IsTarget field.
func (o *ViewColumn) SetIsTarget(v bool) {
	o.IsTarget = &v
}

// GetLanguageCode returns the LanguageCode field value if set, zero value otherwise.
func (o *ViewColumn) GetLanguageCode() string {
	if o == nil || isNil(o.LanguageCode) {
		var ret string
		return ret
	}
	return *o.LanguageCode
}

// GetLanguageCodeOk returns a tuple with the LanguageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewColumn) GetLanguageCodeOk() (*string, bool) {
	if o == nil || isNil(o.LanguageCode) {
    return nil, false
	}
	return o.LanguageCode, true
}

// HasLanguageCode returns a boolean if a field has been set.
func (o *ViewColumn) HasLanguageCode() bool {
	if o != nil && !isNil(o.LanguageCode) {
		return true
	}

	return false
}

// SetLanguageCode gets a reference to the given string and assigns it to the LanguageCode field.
func (o *ViewColumn) SetLanguageCode(v string) {
	o.LanguageCode = &v
}

// GetLocalizationType returns the LocalizationType field value if set, zero value otherwise.
func (o *ViewColumn) GetLocalizationType() string {
	if o == nil || isNil(o.LocalizationType) {
		var ret string
		return ret
	}
	return *o.LocalizationType
}

// GetLocalizationTypeOk returns a tuple with the LocalizationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewColumn) GetLocalizationTypeOk() (*string, bool) {
	if o == nil || isNil(o.LocalizationType) {
    return nil, false
	}
	return o.LocalizationType, true
}

// HasLocalizationType returns a boolean if a field has been set.
func (o *ViewColumn) HasLocalizationType() bool {
	if o != nil && !isNil(o.LocalizationType) {
		return true
	}

	return false
}

// SetLocalizationType gets a reference to the given string and assigns it to the LocalizationType field.
func (o *ViewColumn) SetLocalizationType(v string) {
	o.LocalizationType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ViewColumn) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewColumn) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ViewColumn) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ViewColumn) SetName(v string) {
	o.Name = &v
}

// GetNumberFormat returns the NumberFormat field value if set, zero value otherwise.
func (o *ViewColumn) GetNumberFormat() NumberFormat {
	if o == nil || isNil(o.NumberFormat) {
		var ret NumberFormat
		return ret
	}
	return *o.NumberFormat
}

// GetNumberFormatOk returns a tuple with the NumberFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewColumn) GetNumberFormatOk() (*NumberFormat, bool) {
	if o == nil || isNil(o.NumberFormat) {
    return nil, false
	}
	return o.NumberFormat, true
}

// HasNumberFormat returns a boolean if a field has been set.
func (o *ViewColumn) HasNumberFormat() bool {
	if o != nil && !isNil(o.NumberFormat) {
		return true
	}

	return false
}

// SetNumberFormat gets a reference to the given NumberFormat and assigns it to the NumberFormat field.
func (o *ViewColumn) SetNumberFormat(v NumberFormat) {
	o.NumberFormat = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *ViewColumn) GetReference() ColumnReference {
	if o == nil || isNil(o.Reference) {
		var ret ColumnReference
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewColumn) GetReferenceOk() (*ColumnReference, bool) {
	if o == nil || isNil(o.Reference) {
    return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *ViewColumn) HasReference() bool {
	if o != nil && !isNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given ColumnReference and assigns it to the Reference field.
func (o *ViewColumn) SetReference(v ColumnReference) {
	o.Reference = &v
}

// GetSelectionOptions returns the SelectionOptions field value if set, zero value otherwise.
func (o *ViewColumn) GetSelectionOptions() []string {
	if o == nil || isNil(o.SelectionOptions) {
		var ret []string
		return ret
	}
	return o.SelectionOptions
}

// GetSelectionOptionsOk returns a tuple with the SelectionOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewColumn) GetSelectionOptionsOk() ([]string, bool) {
	if o == nil || isNil(o.SelectionOptions) {
    return nil, false
	}
	return o.SelectionOptions, true
}

// HasSelectionOptions returns a boolean if a field has been set.
func (o *ViewColumn) HasSelectionOptions() bool {
	if o != nil && !isNil(o.SelectionOptions) {
		return true
	}

	return false
}

// SetSelectionOptions gets a reference to the given []string and assigns it to the SelectionOptions field.
func (o *ViewColumn) SetSelectionOptions(v []string) {
	o.SelectionOptions = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ViewColumn) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewColumn) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ViewColumn) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ViewColumn) SetType(v string) {
	o.Type = &v
}

func (o ViewColumn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.DateTimeFormat) {
		toSerialize["dateTimeFormat"] = o.DateTimeFormat
	}
	if !isNil(o.DependsOn) {
		toSerialize["dependsOn"] = o.DependsOn
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Editable) {
		toSerialize["editable"] = o.Editable
	}
	if !isNil(o.Formula) {
		toSerialize["formula"] = o.Formula
	}
	if !isNil(o.IsSource) {
		toSerialize["isSource"] = o.IsSource
	}
	if !isNil(o.IsTarget) {
		toSerialize["isTarget"] = o.IsTarget
	}
	if !isNil(o.LanguageCode) {
		toSerialize["languageCode"] = o.LanguageCode
	}
	if !isNil(o.LocalizationType) {
		toSerialize["localizationType"] = o.LocalizationType
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.NumberFormat) {
		toSerialize["numberFormat"] = o.NumberFormat
	}
	if !isNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !isNil(o.SelectionOptions) {
		toSerialize["selectionOptions"] = o.SelectionOptions
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableViewColumn struct {
	value *ViewColumn
	isSet bool
}

func (v NullableViewColumn) Get() *ViewColumn {
	return v.value
}

func (v *NullableViewColumn) Set(val *ViewColumn) {
	v.value = val
	v.isSet = true
}

func (v NullableViewColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableViewColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewColumn(val *ViewColumn) *NullableViewColumn {
	return &NullableViewColumn{value: val, isSet: true}
}

func (v NullableViewColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


