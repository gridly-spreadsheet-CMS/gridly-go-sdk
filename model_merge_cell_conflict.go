/*
Gridly API

Gridly API documentation

API version: 5.9.0
Contact: support@gridly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
)

// MergeCellConflict struct for MergeCellConflict
type MergeCellConflict struct {
	ColumnId string `json:"columnId"`
	Option string `json:"option"`
}

// NewMergeCellConflict instantiates a new MergeCellConflict object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMergeCellConflict(columnId string, option string) *MergeCellConflict {
	this := MergeCellConflict{}
	this.ColumnId = columnId
	this.Option = option
	return &this
}

// NewMergeCellConflictWithDefaults instantiates a new MergeCellConflict object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMergeCellConflictWithDefaults() *MergeCellConflict {
	this := MergeCellConflict{}
	return &this
}

// GetColumnId returns the ColumnId field value
func (o *MergeCellConflict) GetColumnId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ColumnId
}

// GetColumnIdOk returns a tuple with the ColumnId field value
// and a boolean to check if the value has been set.
func (o *MergeCellConflict) GetColumnIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ColumnId, true
}

// SetColumnId sets field value
func (o *MergeCellConflict) SetColumnId(v string) {
	o.ColumnId = v
}

// GetOption returns the Option field value
func (o *MergeCellConflict) GetOption() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Option
}

// GetOptionOk returns a tuple with the Option field value
// and a boolean to check if the value has been set.
func (o *MergeCellConflict) GetOptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Option, true
}

// SetOption sets field value
func (o *MergeCellConflict) SetOption(v string) {
	o.Option = v
}

func (o MergeCellConflict) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["columnId"] = o.ColumnId
	}
	if true {
		toSerialize["option"] = o.Option
	}
	return json.Marshal(toSerialize)
}

type NullableMergeCellConflict struct {
	value *MergeCellConflict
	isSet bool
}

func (v NullableMergeCellConflict) Get() *MergeCellConflict {
	return v.value
}

func (v *NullableMergeCellConflict) Set(val *MergeCellConflict) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeCellConflict) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeCellConflict) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeCellConflict(val *MergeCellConflict) *NullableMergeCellConflict {
	return &NullableMergeCellConflict{value: val, isSet: true}
}

func (v NullableMergeCellConflict) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeCellConflict) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


