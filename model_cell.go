/*
Gridly API

Gridly API documentation

API version: 5.9.0
Contact: support@gridly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
)

// Cell struct for Cell
type Cell struct {
	ColumnId *string `json:"columnId,omitempty"`
	DependencyStatus *string `json:"dependencyStatus,omitempty"`
	LengthLimit *int32 `json:"lengthLimit,omitempty"`
	ReferencedIds []string `json:"referencedIds,omitempty"`
	SourceStatus *string `json:"sourceStatus,omitempty"`
	Tm *bool `json:"tm,omitempty"`
	Value *interface{} `json:"value,omitempty"`
}

// NewCell instantiates a new Cell object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCell() *Cell {
	this := Cell{}
	return &this
}

// NewCellWithDefaults instantiates a new Cell object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCellWithDefaults() *Cell {
	this := Cell{}
	return &this
}

// GetColumnId returns the ColumnId field value if set, zero value otherwise.
func (o *Cell) GetColumnId() string {
	if o == nil || isNil(o.ColumnId) {
		var ret string
		return ret
	}
	return *o.ColumnId
}

// GetColumnIdOk returns a tuple with the ColumnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cell) GetColumnIdOk() (*string, bool) {
	if o == nil || isNil(o.ColumnId) {
    return nil, false
	}
	return o.ColumnId, true
}

// HasColumnId returns a boolean if a field has been set.
func (o *Cell) HasColumnId() bool {
	if o != nil && !isNil(o.ColumnId) {
		return true
	}

	return false
}

// SetColumnId gets a reference to the given string and assigns it to the ColumnId field.
func (o *Cell) SetColumnId(v string) {
	o.ColumnId = &v
}

// GetDependencyStatus returns the DependencyStatus field value if set, zero value otherwise.
func (o *Cell) GetDependencyStatus() string {
	if o == nil || isNil(o.DependencyStatus) {
		var ret string
		return ret
	}
	return *o.DependencyStatus
}

// GetDependencyStatusOk returns a tuple with the DependencyStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cell) GetDependencyStatusOk() (*string, bool) {
	if o == nil || isNil(o.DependencyStatus) {
    return nil, false
	}
	return o.DependencyStatus, true
}

// HasDependencyStatus returns a boolean if a field has been set.
func (o *Cell) HasDependencyStatus() bool {
	if o != nil && !isNil(o.DependencyStatus) {
		return true
	}

	return false
}

// SetDependencyStatus gets a reference to the given string and assigns it to the DependencyStatus field.
func (o *Cell) SetDependencyStatus(v string) {
	o.DependencyStatus = &v
}

// GetLengthLimit returns the LengthLimit field value if set, zero value otherwise.
func (o *Cell) GetLengthLimit() int32 {
	if o == nil || isNil(o.LengthLimit) {
		var ret int32
		return ret
	}
	return *o.LengthLimit
}

// GetLengthLimitOk returns a tuple with the LengthLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cell) GetLengthLimitOk() (*int32, bool) {
	if o == nil || isNil(o.LengthLimit) {
    return nil, false
	}
	return o.LengthLimit, true
}

// HasLengthLimit returns a boolean if a field has been set.
func (o *Cell) HasLengthLimit() bool {
	if o != nil && !isNil(o.LengthLimit) {
		return true
	}

	return false
}

// SetLengthLimit gets a reference to the given int32 and assigns it to the LengthLimit field.
func (o *Cell) SetLengthLimit(v int32) {
	o.LengthLimit = &v
}

// GetReferencedIds returns the ReferencedIds field value if set, zero value otherwise.
func (o *Cell) GetReferencedIds() []string {
	if o == nil || isNil(o.ReferencedIds) {
		var ret []string
		return ret
	}
	return o.ReferencedIds
}

// GetReferencedIdsOk returns a tuple with the ReferencedIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cell) GetReferencedIdsOk() ([]string, bool) {
	if o == nil || isNil(o.ReferencedIds) {
    return nil, false
	}
	return o.ReferencedIds, true
}

// HasReferencedIds returns a boolean if a field has been set.
func (o *Cell) HasReferencedIds() bool {
	if o != nil && !isNil(o.ReferencedIds) {
		return true
	}

	return false
}

// SetReferencedIds gets a reference to the given []string and assigns it to the ReferencedIds field.
func (o *Cell) SetReferencedIds(v []string) {
	o.ReferencedIds = v
}

// GetSourceStatus returns the SourceStatus field value if set, zero value otherwise.
func (o *Cell) GetSourceStatus() string {
	if o == nil || isNil(o.SourceStatus) {
		var ret string
		return ret
	}
	return *o.SourceStatus
}

// GetSourceStatusOk returns a tuple with the SourceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cell) GetSourceStatusOk() (*string, bool) {
	if o == nil || isNil(o.SourceStatus) {
    return nil, false
	}
	return o.SourceStatus, true
}

// HasSourceStatus returns a boolean if a field has been set.
func (o *Cell) HasSourceStatus() bool {
	if o != nil && !isNil(o.SourceStatus) {
		return true
	}

	return false
}

// SetSourceStatus gets a reference to the given string and assigns it to the SourceStatus field.
func (o *Cell) SetSourceStatus(v string) {
	o.SourceStatus = &v
}

// GetTm returns the Tm field value if set, zero value otherwise.
func (o *Cell) GetTm() bool {
	if o == nil || isNil(o.Tm) {
		var ret bool
		return ret
	}
	return *o.Tm
}

// GetTmOk returns a tuple with the Tm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cell) GetTmOk() (*bool, bool) {
	if o == nil || isNil(o.Tm) {
    return nil, false
	}
	return o.Tm, true
}

// HasTm returns a boolean if a field has been set.
func (o *Cell) HasTm() bool {
	if o != nil && !isNil(o.Tm) {
		return true
	}

	return false
}

// SetTm gets a reference to the given bool and assigns it to the Tm field.
func (o *Cell) SetTm(v bool) {
	o.Tm = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Cell) GetValue() interface{} {
	if o == nil || isNil(o.Value) {
		var ret interface{}
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cell) GetValueOk() (*interface{}, bool) {
	if o == nil || isNil(o.Value) {
    return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Cell) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *Cell) SetValue(v interface{}) {
	o.Value = &v
}

func (o Cell) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ColumnId) {
		toSerialize["columnId"] = o.ColumnId
	}
	if !isNil(o.DependencyStatus) {
		toSerialize["dependencyStatus"] = o.DependencyStatus
	}
	if !isNil(o.LengthLimit) {
		toSerialize["lengthLimit"] = o.LengthLimit
	}
	if !isNil(o.ReferencedIds) {
		toSerialize["referencedIds"] = o.ReferencedIds
	}
	if !isNil(o.SourceStatus) {
		toSerialize["sourceStatus"] = o.SourceStatus
	}
	if !isNil(o.Tm) {
		toSerialize["tm"] = o.Tm
	}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableCell struct {
	value *Cell
	isSet bool
}

func (v NullableCell) Get() *Cell {
	return v.value
}

func (v *NullableCell) Set(val *Cell) {
	v.value = val
	v.isSet = true
}

func (v NullableCell) IsSet() bool {
	return v.isSet
}

func (v *NullableCell) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCell(val *Cell) *NullableCell {
	return &NullableCell{value: val, isSet: true}
}

func (v NullableCell) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCell) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


