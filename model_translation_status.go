/*
Gridly API

Gridly API documentation

API version: 5.9.0
Contact: support@gridly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
	"fmt"
)

// TranslationStatus the model 'TranslationStatus'
type TranslationStatus string

// List of TranslationStatus
const (
	TRANSLATIONSTATUS_UP_TO_DATE TranslationStatus = "upToDate"
	TRANSLATIONSTATUS_OUT_OF_DATE TranslationStatus = "outOfDate"
	TRANSLATIONSTATUS_UNSET TranslationStatus = "unset"
)

// All allowed values of TranslationStatus enum
var AllowedTranslationStatusEnumValues = []TranslationStatus{
	"upToDate",
	"outOfDate",
	"unset",
}

func (v *TranslationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TranslationStatus(value)
	for _, existing := range AllowedTranslationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TranslationStatus", value)
}

// NewTranslationStatusFromValue returns a pointer to a valid TranslationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTranslationStatusFromValue(v string) (*TranslationStatus, error) {
	ev := TranslationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TranslationStatus: valid values are %v", v, AllowedTranslationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TranslationStatus) IsValid() bool {
	for _, existing := range AllowedTranslationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TranslationStatus value
func (v TranslationStatus) Ptr() *TranslationStatus {
	return &v
}

type NullableTranslationStatus struct {
	value *TranslationStatus
	isSet bool
}

func (v NullableTranslationStatus) Get() *TranslationStatus {
	return v.value
}

func (v *NullableTranslationStatus) Set(val *TranslationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslationStatus(val *TranslationStatus) *NullableTranslationStatus {
	return &NullableTranslationStatus{value: val, isSet: true}
}

func (v NullableTranslationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

