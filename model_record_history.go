/*
Gridly API

Gridly API documentation

API version: 5.9.0
Contact: support@gridly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
	"time"
)

// RecordHistory struct for RecordHistory
type RecordHistory struct {
	Path *string `json:"path,omitempty"`
	Cells []CellHistory `json:"cells,omitempty"`
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
}

// NewRecordHistory instantiates a new RecordHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordHistory() *RecordHistory {
	this := RecordHistory{}
	return &this
}

// NewRecordHistoryWithDefaults instantiates a new RecordHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordHistoryWithDefaults() *RecordHistory {
	this := RecordHistory{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *RecordHistory) GetPath() string {
	if o == nil || isNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHistory) GetPathOk() (*string, bool) {
	if o == nil || isNil(o.Path) {
    return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *RecordHistory) HasPath() bool {
	if o != nil && !isNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *RecordHistory) SetPath(v string) {
	o.Path = &v
}

// GetCells returns the Cells field value if set, zero value otherwise.
func (o *RecordHistory) GetCells() []CellHistory {
	if o == nil || isNil(o.Cells) {
		var ret []CellHistory
		return ret
	}
	return o.Cells
}

// GetCellsOk returns a tuple with the Cells field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHistory) GetCellsOk() ([]CellHistory, bool) {
	if o == nil || isNil(o.Cells) {
    return nil, false
	}
	return o.Cells, true
}

// HasCells returns a boolean if a field has been set.
func (o *RecordHistory) HasCells() bool {
	if o != nil && !isNil(o.Cells) {
		return true
	}

	return false
}

// SetCells gets a reference to the given []CellHistory and assigns it to the Cells field.
func (o *RecordHistory) SetCells(v []CellHistory) {
	o.Cells = v
}

// GetLastModifiedBy returns the LastModifiedBy field value if set, zero value otherwise.
func (o *RecordHistory) GetLastModifiedBy() string {
	if o == nil || isNil(o.LastModifiedBy) {
		var ret string
		return ret
	}
	return *o.LastModifiedBy
}

// GetLastModifiedByOk returns a tuple with the LastModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHistory) GetLastModifiedByOk() (*string, bool) {
	if o == nil || isNil(o.LastModifiedBy) {
    return nil, false
	}
	return o.LastModifiedBy, true
}

// HasLastModifiedBy returns a boolean if a field has been set.
func (o *RecordHistory) HasLastModifiedBy() bool {
	if o != nil && !isNil(o.LastModifiedBy) {
		return true
	}

	return false
}

// SetLastModifiedBy gets a reference to the given string and assigns it to the LastModifiedBy field.
func (o *RecordHistory) SetLastModifiedBy(v string) {
	o.LastModifiedBy = &v
}

// GetLastModifiedTime returns the LastModifiedTime field value if set, zero value otherwise.
func (o *RecordHistory) GetLastModifiedTime() time.Time {
	if o == nil || isNil(o.LastModifiedTime) {
		var ret time.Time
		return ret
	}
	return *o.LastModifiedTime
}

// GetLastModifiedTimeOk returns a tuple with the LastModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordHistory) GetLastModifiedTimeOk() (*time.Time, bool) {
	if o == nil || isNil(o.LastModifiedTime) {
    return nil, false
	}
	return o.LastModifiedTime, true
}

// HasLastModifiedTime returns a boolean if a field has been set.
func (o *RecordHistory) HasLastModifiedTime() bool {
	if o != nil && !isNil(o.LastModifiedTime) {
		return true
	}

	return false
}

// SetLastModifiedTime gets a reference to the given time.Time and assigns it to the LastModifiedTime field.
func (o *RecordHistory) SetLastModifiedTime(v time.Time) {
	o.LastModifiedTime = &v
}

func (o RecordHistory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !isNil(o.Cells) {
		toSerialize["cells"] = o.Cells
	}
	if !isNil(o.LastModifiedBy) {
		toSerialize["lastModifiedBy"] = o.LastModifiedBy
	}
	if !isNil(o.LastModifiedTime) {
		toSerialize["lastModifiedTime"] = o.LastModifiedTime
	}
	return json.Marshal(toSerialize)
}

type NullableRecordHistory struct {
	value *RecordHistory
	isSet bool
}

func (v NullableRecordHistory) Get() *RecordHistory {
	return v.value
}

func (v *NullableRecordHistory) Set(val *RecordHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordHistory(val *RecordHistory) *NullableRecordHistory {
	return &NullableRecordHistory{value: val, isSet: true}
}

func (v NullableRecordHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


