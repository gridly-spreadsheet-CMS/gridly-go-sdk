/*
Gridly API

Gridly API documentation

API version: 5.9.0
Contact: support@gridly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
	"fmt"
)

// GlossaryExportFormat the model 'GlossaryExportFormat'
type GlossaryExportFormat string

// List of GlossaryExportFormat
const (
	GLOSSARYEXPORTFORMAT_CSV GlossaryExportFormat = "csv"
	GLOSSARYEXPORTFORMAT_XLS GlossaryExportFormat = "xls"
	GLOSSARYEXPORTFORMAT_XLSX GlossaryExportFormat = "xlsx"
	GLOSSARYEXPORTFORMAT_TBX GlossaryExportFormat = "tbx"
)

// All allowed values of GlossaryExportFormat enum
var AllowedGlossaryExportFormatEnumValues = []GlossaryExportFormat{
	"csv",
	"xls",
	"xlsx",
	"tbx",
}

func (v *GlossaryExportFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GlossaryExportFormat(value)
	for _, existing := range AllowedGlossaryExportFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GlossaryExportFormat", value)
}

// NewGlossaryExportFormatFromValue returns a pointer to a valid GlossaryExportFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGlossaryExportFormatFromValue(v string) (*GlossaryExportFormat, error) {
	ev := GlossaryExportFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GlossaryExportFormat: valid values are %v", v, AllowedGlossaryExportFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GlossaryExportFormat) IsValid() bool {
	for _, existing := range AllowedGlossaryExportFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GlossaryExportFormat value
func (v GlossaryExportFormat) Ptr() *GlossaryExportFormat {
	return &v
}

type NullableGlossaryExportFormat struct {
	value *GlossaryExportFormat
	isSet bool
}

func (v NullableGlossaryExportFormat) Get() *GlossaryExportFormat {
	return v.value
}

func (v *NullableGlossaryExportFormat) Set(val *GlossaryExportFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableGlossaryExportFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableGlossaryExportFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlossaryExportFormat(val *GlossaryExportFormat) *NullableGlossaryExportFormat {
	return &NullableGlossaryExportFormat{value: val, isSet: true}
}

func (v NullableGlossaryExportFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlossaryExportFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

