/*
Gridly API

Gridly API documentation

API version: 5.9.0
Contact: support@gridly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
)

// DeletePath struct for DeletePath
type DeletePath struct {
	Paths []string `json:"paths,omitempty"`
}

// NewDeletePath instantiates a new DeletePath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeletePath() *DeletePath {
	this := DeletePath{}
	return &this
}

// NewDeletePathWithDefaults instantiates a new DeletePath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeletePathWithDefaults() *DeletePath {
	this := DeletePath{}
	return &this
}

// GetPaths returns the Paths field value if set, zero value otherwise.
func (o *DeletePath) GetPaths() []string {
	if o == nil || isNil(o.Paths) {
		var ret []string
		return ret
	}
	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletePath) GetPathsOk() ([]string, bool) {
	if o == nil || isNil(o.Paths) {
    return nil, false
	}
	return o.Paths, true
}

// HasPaths returns a boolean if a field has been set.
func (o *DeletePath) HasPaths() bool {
	if o != nil && !isNil(o.Paths) {
		return true
	}

	return false
}

// SetPaths gets a reference to the given []string and assigns it to the Paths field.
func (o *DeletePath) SetPaths(v []string) {
	o.Paths = v
}

func (o DeletePath) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Paths) {
		toSerialize["paths"] = o.Paths
	}
	return json.Marshal(toSerialize)
}

type NullableDeletePath struct {
	value *DeletePath
	isSet bool
}

func (v NullableDeletePath) Get() *DeletePath {
	return v.value
}

func (v *NullableDeletePath) Set(val *DeletePath) {
	v.value = val
	v.isSet = true
}

func (v NullableDeletePath) IsSet() bool {
	return v.isSet
}

func (v *NullableDeletePath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeletePath(val *DeletePath) *NullableDeletePath {
	return &NullableDeletePath{value: val, isSet: true}
}

func (v NullableDeletePath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeletePath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


