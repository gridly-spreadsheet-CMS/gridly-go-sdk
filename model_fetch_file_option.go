/*
Gridly API

Gridly API documentation

API version: 5.9.0
Contact: support@gridly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
	"fmt"
)

// FetchFileOption the model 'FetchFileOption'
type FetchFileOption string

// List of FetchFileOption
const (
	FETCHFILEOPTION_all FetchFileOption = "all"
	FETCHFILEOPTION_id FetchFileOption = "id"
	FETCHFILEOPTION_name FetchFileOption = "name"
)

// All allowed values of FetchFileOption enum
var AllowedFetchFileOptionEnumValues = []FetchFileOption{
	"all",
	"id",
	"name",
}

func (v *FetchFileOption) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FetchFileOption(value)
	for _, existing := range AllowedFetchFileOptionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FetchFileOption", value)
}

// NewFetchFileOptionFromValue returns a pointer to a valid FetchFileOption
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFetchFileOptionFromValue(v string) (*FetchFileOption, error) {
	ev := FetchFileOption(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FetchFileOption: valid values are %v", v, AllowedFetchFileOptionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FetchFileOption) IsValid() bool {
	for _, existing := range AllowedFetchFileOptionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FetchFileOption value
func (v FetchFileOption) Ptr() *FetchFileOption {
	return &v
}

type NullableFetchFileOption struct {
	value *FetchFileOption
	isSet bool
}

func (v NullableFetchFileOption) Get() *FetchFileOption {
	return v.value
}

func (v *NullableFetchFileOption) Set(val *FetchFileOption) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchFileOption) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchFileOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchFileOption(val *FetchFileOption) *NullableFetchFileOption {
	return &NullableFetchFileOption{value: val, isSet: true}
}

func (v NullableFetchFileOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchFileOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

