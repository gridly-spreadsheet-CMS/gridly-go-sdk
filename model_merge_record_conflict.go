/*
Gridly API

Gridly API documentation

API version: 5.9.0
Contact: support@gridly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
)

// MergeRecordConflict struct for MergeRecordConflict
type MergeRecordConflict struct {
	Cells []MergeCellConflict `json:"cells,omitempty"`
	PathTag *string `json:"pathTag,omitempty"`
	RecordId *string `json:"recordId,omitempty"`
}

// NewMergeRecordConflict instantiates a new MergeRecordConflict object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMergeRecordConflict() *MergeRecordConflict {
	this := MergeRecordConflict{}
	return &this
}

// NewMergeRecordConflictWithDefaults instantiates a new MergeRecordConflict object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMergeRecordConflictWithDefaults() *MergeRecordConflict {
	this := MergeRecordConflict{}
	return &this
}

// GetCells returns the Cells field value if set, zero value otherwise.
func (o *MergeRecordConflict) GetCells() []MergeCellConflict {
	if o == nil || isNil(o.Cells) {
		var ret []MergeCellConflict
		return ret
	}
	return o.Cells
}

// GetCellsOk returns a tuple with the Cells field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRecordConflict) GetCellsOk() ([]MergeCellConflict, bool) {
	if o == nil || isNil(o.Cells) {
    return nil, false
	}
	return o.Cells, true
}

// HasCells returns a boolean if a field has been set.
func (o *MergeRecordConflict) HasCells() bool {
	if o != nil && !isNil(o.Cells) {
		return true
	}

	return false
}

// SetCells gets a reference to the given []MergeCellConflict and assigns it to the Cells field.
func (o *MergeRecordConflict) SetCells(v []MergeCellConflict) {
	o.Cells = v
}

// GetPathTag returns the PathTag field value if set, zero value otherwise.
func (o *MergeRecordConflict) GetPathTag() string {
	if o == nil || isNil(o.PathTag) {
		var ret string
		return ret
	}
	return *o.PathTag
}

// GetPathTagOk returns a tuple with the PathTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRecordConflict) GetPathTagOk() (*string, bool) {
	if o == nil || isNil(o.PathTag) {
    return nil, false
	}
	return o.PathTag, true
}

// HasPathTag returns a boolean if a field has been set.
func (o *MergeRecordConflict) HasPathTag() bool {
	if o != nil && !isNil(o.PathTag) {
		return true
	}

	return false
}

// SetPathTag gets a reference to the given string and assigns it to the PathTag field.
func (o *MergeRecordConflict) SetPathTag(v string) {
	o.PathTag = &v
}

// GetRecordId returns the RecordId field value if set, zero value otherwise.
func (o *MergeRecordConflict) GetRecordId() string {
	if o == nil || isNil(o.RecordId) {
		var ret string
		return ret
	}
	return *o.RecordId
}

// GetRecordIdOk returns a tuple with the RecordId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeRecordConflict) GetRecordIdOk() (*string, bool) {
	if o == nil || isNil(o.RecordId) {
    return nil, false
	}
	return o.RecordId, true
}

// HasRecordId returns a boolean if a field has been set.
func (o *MergeRecordConflict) HasRecordId() bool {
	if o != nil && !isNil(o.RecordId) {
		return true
	}

	return false
}

// SetRecordId gets a reference to the given string and assigns it to the RecordId field.
func (o *MergeRecordConflict) SetRecordId(v string) {
	o.RecordId = &v
}

func (o MergeRecordConflict) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Cells) {
		toSerialize["cells"] = o.Cells
	}
	if !isNil(o.PathTag) {
		toSerialize["pathTag"] = o.PathTag
	}
	if !isNil(o.RecordId) {
		toSerialize["recordId"] = o.RecordId
	}
	return json.Marshal(toSerialize)
}

type NullableMergeRecordConflict struct {
	value *MergeRecordConflict
	isSet bool
}

func (v NullableMergeRecordConflict) Get() *MergeRecordConflict {
	return v.value
}

func (v *NullableMergeRecordConflict) Set(val *MergeRecordConflict) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeRecordConflict) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeRecordConflict) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeRecordConflict(val *MergeRecordConflict) *NullableMergeRecordConflict {
	return &NullableMergeRecordConflict{value: val, isSet: true}
}

func (v NullableMergeRecordConflict) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeRecordConflict) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


