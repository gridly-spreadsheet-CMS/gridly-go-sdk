/*
Gridly API

Gridly API documentation

API version: 5.9.0
Contact: support@gridly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
)

// GlossaryProject struct for GlossaryProject
type GlossaryProject struct {
	ProjectId *int64 `json:"projectId,omitempty"`
	DatabaseIds []string `json:"databaseIds,omitempty"`
}

// NewGlossaryProject instantiates a new GlossaryProject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlossaryProject() *GlossaryProject {
	this := GlossaryProject{}
	return &this
}

// NewGlossaryProjectWithDefaults instantiates a new GlossaryProject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlossaryProjectWithDefaults() *GlossaryProject {
	this := GlossaryProject{}
	return &this
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *GlossaryProject) GetProjectId() int64 {
	if o == nil || isNil(o.ProjectId) {
		var ret int64
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlossaryProject) GetProjectIdOk() (*int64, bool) {
	if o == nil || isNil(o.ProjectId) {
    return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *GlossaryProject) HasProjectId() bool {
	if o != nil && !isNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int64 and assigns it to the ProjectId field.
func (o *GlossaryProject) SetProjectId(v int64) {
	o.ProjectId = &v
}

// GetDatabaseIds returns the DatabaseIds field value if set, zero value otherwise.
func (o *GlossaryProject) GetDatabaseIds() []string {
	if o == nil || isNil(o.DatabaseIds) {
		var ret []string
		return ret
	}
	return o.DatabaseIds
}

// GetDatabaseIdsOk returns a tuple with the DatabaseIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlossaryProject) GetDatabaseIdsOk() ([]string, bool) {
	if o == nil || isNil(o.DatabaseIds) {
    return nil, false
	}
	return o.DatabaseIds, true
}

// HasDatabaseIds returns a boolean if a field has been set.
func (o *GlossaryProject) HasDatabaseIds() bool {
	if o != nil && !isNil(o.DatabaseIds) {
		return true
	}

	return false
}

// SetDatabaseIds gets a reference to the given []string and assigns it to the DatabaseIds field.
func (o *GlossaryProject) SetDatabaseIds(v []string) {
	o.DatabaseIds = v
}

func (o GlossaryProject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	if !isNil(o.DatabaseIds) {
		toSerialize["databaseIds"] = o.DatabaseIds
	}
	return json.Marshal(toSerialize)
}

type NullableGlossaryProject struct {
	value *GlossaryProject
	isSet bool
}

func (v NullableGlossaryProject) Get() *GlossaryProject {
	return v.value
}

func (v *NullableGlossaryProject) Set(val *GlossaryProject) {
	v.value = val
	v.isSet = true
}

func (v NullableGlossaryProject) IsSet() bool {
	return v.isSet
}

func (v *NullableGlossaryProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlossaryProject(val *GlossaryProject) *NullableGlossaryProject {
	return &NullableGlossaryProject{value: val, isSet: true}
}

func (v NullableGlossaryProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlossaryProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


