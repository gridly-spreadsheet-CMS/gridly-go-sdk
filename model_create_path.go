/*
Gridly API

Gridly API documentation

API version: 5.9.0
Contact: support@gridly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
)

// CreatePath struct for CreatePath
type CreatePath struct {
	ParentPath *string `json:"parentPath,omitempty"`
	Paths []string `json:"paths,omitempty"`
}

// NewCreatePath instantiates a new CreatePath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePath() *CreatePath {
	this := CreatePath{}
	return &this
}

// NewCreatePathWithDefaults instantiates a new CreatePath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePathWithDefaults() *CreatePath {
	this := CreatePath{}
	return &this
}

// GetParentPath returns the ParentPath field value if set, zero value otherwise.
func (o *CreatePath) GetParentPath() string {
	if o == nil || isNil(o.ParentPath) {
		var ret string
		return ret
	}
	return *o.ParentPath
}

// GetParentPathOk returns a tuple with the ParentPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePath) GetParentPathOk() (*string, bool) {
	if o == nil || isNil(o.ParentPath) {
    return nil, false
	}
	return o.ParentPath, true
}

// HasParentPath returns a boolean if a field has been set.
func (o *CreatePath) HasParentPath() bool {
	if o != nil && !isNil(o.ParentPath) {
		return true
	}

	return false
}

// SetParentPath gets a reference to the given string and assigns it to the ParentPath field.
func (o *CreatePath) SetParentPath(v string) {
	o.ParentPath = &v
}

// GetPaths returns the Paths field value if set, zero value otherwise.
func (o *CreatePath) GetPaths() []string {
	if o == nil || isNil(o.Paths) {
		var ret []string
		return ret
	}
	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePath) GetPathsOk() ([]string, bool) {
	if o == nil || isNil(o.Paths) {
    return nil, false
	}
	return o.Paths, true
}

// HasPaths returns a boolean if a field has been set.
func (o *CreatePath) HasPaths() bool {
	if o != nil && !isNil(o.Paths) {
		return true
	}

	return false
}

// SetPaths gets a reference to the given []string and assigns it to the Paths field.
func (o *CreatePath) SetPaths(v []string) {
	o.Paths = v
}

func (o CreatePath) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ParentPath) {
		toSerialize["parentPath"] = o.ParentPath
	}
	if !isNil(o.Paths) {
		toSerialize["paths"] = o.Paths
	}
	return json.Marshal(toSerialize)
}

type NullableCreatePath struct {
	value *CreatePath
	isSet bool
}

func (v NullableCreatePath) Get() *CreatePath {
	return v.value
}

func (v *NullableCreatePath) Set(val *CreatePath) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePath) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePath(val *CreatePath) *NullableCreatePath {
	return &NullableCreatePath{value: val, isSet: true}
}

func (v NullableCreatePath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


