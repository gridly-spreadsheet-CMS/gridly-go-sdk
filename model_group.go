/*
Gridly API

Gridly API documentation

API version: 5.9.0
Contact: support@gridly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
	"time"
)

// Group struct for Group
type Group struct {
	Id *string `json:"id,omitempty"`
	GroupId *int64 `json:"groupId,omitempty"`
	CompanyId *int64 `json:"companyId,omitempty"`
	Name *string `json:"name,omitempty"`
	LogoUrl *string `json:"logoUrl,omitempty"`
	Type *string `json:"type,omitempty"`
	ShareType *string `json:"shareType,omitempty"`
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	LastModifiedDate *time.Time `json:"lastModifiedDate,omitempty"`
	SystemGroup *bool `json:"systemGroup,omitempty"`
	IsSystemGroup *bool `json:"isSystemGroup,omitempty"`
}

// NewGroup instantiates a new Group object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroup() *Group {
	this := Group{}
	return &this
}

// NewGroupWithDefaults instantiates a new Group object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupWithDefaults() *Group {
	this := Group{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Group) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Group) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Group) SetId(v string) {
	o.Id = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *Group) GetGroupId() int64 {
	if o == nil || isNil(o.GroupId) {
		var ret int64
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetGroupIdOk() (*int64, bool) {
	if o == nil || isNil(o.GroupId) {
    return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *Group) HasGroupId() bool {
	if o != nil && !isNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given int64 and assigns it to the GroupId field.
func (o *Group) SetGroupId(v int64) {
	o.GroupId = &v
}

// GetCompanyId returns the CompanyId field value if set, zero value otherwise.
func (o *Group) GetCompanyId() int64 {
	if o == nil || isNil(o.CompanyId) {
		var ret int64
		return ret
	}
	return *o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetCompanyIdOk() (*int64, bool) {
	if o == nil || isNil(o.CompanyId) {
    return nil, false
	}
	return o.CompanyId, true
}

// HasCompanyId returns a boolean if a field has been set.
func (o *Group) HasCompanyId() bool {
	if o != nil && !isNil(o.CompanyId) {
		return true
	}

	return false
}

// SetCompanyId gets a reference to the given int64 and assigns it to the CompanyId field.
func (o *Group) SetCompanyId(v int64) {
	o.CompanyId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Group) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Group) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Group) SetName(v string) {
	o.Name = &v
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise.
func (o *Group) GetLogoUrl() string {
	if o == nil || isNil(o.LogoUrl) {
		var ret string
		return ret
	}
	return *o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetLogoUrlOk() (*string, bool) {
	if o == nil || isNil(o.LogoUrl) {
    return nil, false
	}
	return o.LogoUrl, true
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *Group) HasLogoUrl() bool {
	if o != nil && !isNil(o.LogoUrl) {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given string and assigns it to the LogoUrl field.
func (o *Group) SetLogoUrl(v string) {
	o.LogoUrl = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Group) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Group) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Group) SetType(v string) {
	o.Type = &v
}

// GetShareType returns the ShareType field value if set, zero value otherwise.
func (o *Group) GetShareType() string {
	if o == nil || isNil(o.ShareType) {
		var ret string
		return ret
	}
	return *o.ShareType
}

// GetShareTypeOk returns a tuple with the ShareType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetShareTypeOk() (*string, bool) {
	if o == nil || isNil(o.ShareType) {
    return nil, false
	}
	return o.ShareType, true
}

// HasShareType returns a boolean if a field has been set.
func (o *Group) HasShareType() bool {
	if o != nil && !isNil(o.ShareType) {
		return true
	}

	return false
}

// SetShareType gets a reference to the given string and assigns it to the ShareType field.
func (o *Group) SetShareType(v string) {
	o.ShareType = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *Group) GetCreatedDate() time.Time {
	if o == nil || isNil(o.CreatedDate) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedDate) {
    return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *Group) HasCreatedDate() bool {
	if o != nil && !isNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *Group) SetCreatedDate(v time.Time) {
	o.CreatedDate = &v
}

// GetLastModifiedDate returns the LastModifiedDate field value if set, zero value otherwise.
func (o *Group) GetLastModifiedDate() time.Time {
	if o == nil || isNil(o.LastModifiedDate) {
		var ret time.Time
		return ret
	}
	return *o.LastModifiedDate
}

// GetLastModifiedDateOk returns a tuple with the LastModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetLastModifiedDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.LastModifiedDate) {
    return nil, false
	}
	return o.LastModifiedDate, true
}

// HasLastModifiedDate returns a boolean if a field has been set.
func (o *Group) HasLastModifiedDate() bool {
	if o != nil && !isNil(o.LastModifiedDate) {
		return true
	}

	return false
}

// SetLastModifiedDate gets a reference to the given time.Time and assigns it to the LastModifiedDate field.
func (o *Group) SetLastModifiedDate(v time.Time) {
	o.LastModifiedDate = &v
}

// GetSystemGroup returns the SystemGroup field value if set, zero value otherwise.
func (o *Group) GetSystemGroup() bool {
	if o == nil || isNil(o.SystemGroup) {
		var ret bool
		return ret
	}
	return *o.SystemGroup
}

// GetSystemGroupOk returns a tuple with the SystemGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetSystemGroupOk() (*bool, bool) {
	if o == nil || isNil(o.SystemGroup) {
    return nil, false
	}
	return o.SystemGroup, true
}

// HasSystemGroup returns a boolean if a field has been set.
func (o *Group) HasSystemGroup() bool {
	if o != nil && !isNil(o.SystemGroup) {
		return true
	}

	return false
}

// SetSystemGroup gets a reference to the given bool and assigns it to the SystemGroup field.
func (o *Group) SetSystemGroup(v bool) {
	o.SystemGroup = &v
}

// GetIsSystemGroup returns the IsSystemGroup field value if set, zero value otherwise.
func (o *Group) GetIsSystemGroup() bool {
	if o == nil || isNil(o.IsSystemGroup) {
		var ret bool
		return ret
	}
	return *o.IsSystemGroup
}

// GetIsSystemGroupOk returns a tuple with the IsSystemGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetIsSystemGroupOk() (*bool, bool) {
	if o == nil || isNil(o.IsSystemGroup) {
    return nil, false
	}
	return o.IsSystemGroup, true
}

// HasIsSystemGroup returns a boolean if a field has been set.
func (o *Group) HasIsSystemGroup() bool {
	if o != nil && !isNil(o.IsSystemGroup) {
		return true
	}

	return false
}

// SetIsSystemGroup gets a reference to the given bool and assigns it to the IsSystemGroup field.
func (o *Group) SetIsSystemGroup(v bool) {
	o.IsSystemGroup = &v
}

func (o Group) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !isNil(o.CompanyId) {
		toSerialize["companyId"] = o.CompanyId
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.LogoUrl) {
		toSerialize["logoUrl"] = o.LogoUrl
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.ShareType) {
		toSerialize["shareType"] = o.ShareType
	}
	if !isNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !isNil(o.LastModifiedDate) {
		toSerialize["lastModifiedDate"] = o.LastModifiedDate
	}
	if !isNil(o.SystemGroup) {
		toSerialize["systemGroup"] = o.SystemGroup
	}
	if !isNil(o.IsSystemGroup) {
		toSerialize["isSystemGroup"] = o.IsSystemGroup
	}
	return json.Marshal(toSerialize)
}

type NullableGroup struct {
	value *Group
	isSet bool
}

func (v NullableGroup) Get() *Group {
	return v.value
}

func (v *NullableGroup) Set(val *Group) {
	v.value = val
	v.isSet = true
}

func (v NullableGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroup(val *Group) *NullableGroup {
	return &NullableGroup{value: val, isSet: true}
}

func (v NullableGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


