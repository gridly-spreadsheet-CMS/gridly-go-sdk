/*
Gridly API

Gridly API documentation

API version: 5.9.0
Contact: support@gridly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
)

// Reference struct for Reference
type Reference struct {
	GridId string `json:"gridId"`
	BranchId *string `json:"branchId,omitempty"`
	ColumnId string `json:"columnId"`
	Type *string `json:"type,omitempty"`
	SelectionType *string `json:"selectionType,omitempty"`
}

// NewReference instantiates a new Reference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReference(gridId string, columnId string) *Reference {
	this := Reference{}
	this.GridId = gridId
	this.ColumnId = columnId
	return &this
}

// NewReferenceWithDefaults instantiates a new Reference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReferenceWithDefaults() *Reference {
	this := Reference{}
	return &this
}

// GetGridId returns the GridId field value
func (o *Reference) GetGridId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GridId
}

// GetGridIdOk returns a tuple with the GridId field value
// and a boolean to check if the value has been set.
func (o *Reference) GetGridIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.GridId, true
}

// SetGridId sets field value
func (o *Reference) SetGridId(v string) {
	o.GridId = v
}

// GetBranchId returns the BranchId field value if set, zero value otherwise.
func (o *Reference) GetBranchId() string {
	if o == nil || isNil(o.BranchId) {
		var ret string
		return ret
	}
	return *o.BranchId
}

// GetBranchIdOk returns a tuple with the BranchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetBranchIdOk() (*string, bool) {
	if o == nil || isNil(o.BranchId) {
    return nil, false
	}
	return o.BranchId, true
}

// HasBranchId returns a boolean if a field has been set.
func (o *Reference) HasBranchId() bool {
	if o != nil && !isNil(o.BranchId) {
		return true
	}

	return false
}

// SetBranchId gets a reference to the given string and assigns it to the BranchId field.
func (o *Reference) SetBranchId(v string) {
	o.BranchId = &v
}

// GetColumnId returns the ColumnId field value
func (o *Reference) GetColumnId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ColumnId
}

// GetColumnIdOk returns a tuple with the ColumnId field value
// and a boolean to check if the value has been set.
func (o *Reference) GetColumnIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ColumnId, true
}

// SetColumnId sets field value
func (o *Reference) SetColumnId(v string) {
	o.ColumnId = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Reference) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Reference) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Reference) SetType(v string) {
	o.Type = &v
}

// GetSelectionType returns the SelectionType field value if set, zero value otherwise.
func (o *Reference) GetSelectionType() string {
	if o == nil || isNil(o.SelectionType) {
		var ret string
		return ret
	}
	return *o.SelectionType
}

// GetSelectionTypeOk returns a tuple with the SelectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference) GetSelectionTypeOk() (*string, bool) {
	if o == nil || isNil(o.SelectionType) {
    return nil, false
	}
	return o.SelectionType, true
}

// HasSelectionType returns a boolean if a field has been set.
func (o *Reference) HasSelectionType() bool {
	if o != nil && !isNil(o.SelectionType) {
		return true
	}

	return false
}

// SetSelectionType gets a reference to the given string and assigns it to the SelectionType field.
func (o *Reference) SetSelectionType(v string) {
	o.SelectionType = &v
}

func (o Reference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["gridId"] = o.GridId
	}
	if !isNil(o.BranchId) {
		toSerialize["branchId"] = o.BranchId
	}
	if true {
		toSerialize["columnId"] = o.ColumnId
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.SelectionType) {
		toSerialize["selectionType"] = o.SelectionType
	}
	return json.Marshal(toSerialize)
}

type NullableReference struct {
	value *Reference
	isSet bool
}

func (v NullableReference) Get() *Reference {
	return v.value
}

func (v *NullableReference) Set(val *Reference) {
	v.value = val
	v.isSet = true
}

func (v NullableReference) IsSet() bool {
	return v.isSet
}

func (v *NullableReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReference(val *Reference) *NullableReference {
	return &NullableReference{value: val, isSet: true}
}

func (v NullableReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


