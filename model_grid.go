/*
Gridly API

Gridly API documentation

API version: 5.9.0
Contact: support@gridly.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gridly

import (
	"encoding/json"
)

// Grid struct for Grid
type Grid struct {
	Id *string `json:"id,omitempty"`
	Columns []ViewColumn `json:"columns,omitempty"`
	DefaultAccessViewId *string `json:"defaultAccessViewId,omitempty"`
	Description *string `json:"description,omitempty"`
	Metadata *map[string]string `json:"metadata,omitempty"`
	Name *string `json:"name,omitempty"`
	RecordIdentifierType *string `json:"recordIdentifierType,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewGrid instantiates a new Grid object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGrid() *Grid {
	this := Grid{}
	return &this
}

// NewGridWithDefaults instantiates a new Grid object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridWithDefaults() *Grid {
	this := Grid{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Grid) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Grid) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Grid) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Grid) SetId(v string) {
	o.Id = &v
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *Grid) GetColumns() []ViewColumn {
	if o == nil || isNil(o.Columns) {
		var ret []ViewColumn
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Grid) GetColumnsOk() ([]ViewColumn, bool) {
	if o == nil || isNil(o.Columns) {
    return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *Grid) HasColumns() bool {
	if o != nil && !isNil(o.Columns) {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []ViewColumn and assigns it to the Columns field.
func (o *Grid) SetColumns(v []ViewColumn) {
	o.Columns = v
}

// GetDefaultAccessViewId returns the DefaultAccessViewId field value if set, zero value otherwise.
func (o *Grid) GetDefaultAccessViewId() string {
	if o == nil || isNil(o.DefaultAccessViewId) {
		var ret string
		return ret
	}
	return *o.DefaultAccessViewId
}

// GetDefaultAccessViewIdOk returns a tuple with the DefaultAccessViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Grid) GetDefaultAccessViewIdOk() (*string, bool) {
	if o == nil || isNil(o.DefaultAccessViewId) {
    return nil, false
	}
	return o.DefaultAccessViewId, true
}

// HasDefaultAccessViewId returns a boolean if a field has been set.
func (o *Grid) HasDefaultAccessViewId() bool {
	if o != nil && !isNil(o.DefaultAccessViewId) {
		return true
	}

	return false
}

// SetDefaultAccessViewId gets a reference to the given string and assigns it to the DefaultAccessViewId field.
func (o *Grid) SetDefaultAccessViewId(v string) {
	o.DefaultAccessViewId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Grid) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Grid) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Grid) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Grid) SetDescription(v string) {
	o.Description = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Grid) GetMetadata() map[string]string {
	if o == nil || isNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Grid) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Metadata) {
    return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Grid) HasMetadata() bool {
	if o != nil && !isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *Grid) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Grid) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Grid) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Grid) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Grid) SetName(v string) {
	o.Name = &v
}

// GetRecordIdentifierType returns the RecordIdentifierType field value if set, zero value otherwise.
func (o *Grid) GetRecordIdentifierType() string {
	if o == nil || isNil(o.RecordIdentifierType) {
		var ret string
		return ret
	}
	return *o.RecordIdentifierType
}

// GetRecordIdentifierTypeOk returns a tuple with the RecordIdentifierType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Grid) GetRecordIdentifierTypeOk() (*string, bool) {
	if o == nil || isNil(o.RecordIdentifierType) {
    return nil, false
	}
	return o.RecordIdentifierType, true
}

// HasRecordIdentifierType returns a boolean if a field has been set.
func (o *Grid) HasRecordIdentifierType() bool {
	if o != nil && !isNil(o.RecordIdentifierType) {
		return true
	}

	return false
}

// SetRecordIdentifierType gets a reference to the given string and assigns it to the RecordIdentifierType field.
func (o *Grid) SetRecordIdentifierType(v string) {
	o.RecordIdentifierType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Grid) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Grid) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Grid) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Grid) SetStatus(v string) {
	o.Status = &v
}

func (o Grid) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Columns) {
		toSerialize["columns"] = o.Columns
	}
	if !isNil(o.DefaultAccessViewId) {
		toSerialize["defaultAccessViewId"] = o.DefaultAccessViewId
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.RecordIdentifierType) {
		toSerialize["recordIdentifierType"] = o.RecordIdentifierType
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableGrid struct {
	value *Grid
	isSet bool
}

func (v NullableGrid) Get() *Grid {
	return v.value
}

func (v *NullableGrid) Set(val *Grid) {
	v.value = val
	v.isSet = true
}

func (v NullableGrid) IsSet() bool {
	return v.isSet
}

func (v *NullableGrid) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGrid(val *Grid) *NullableGrid {
	return &NullableGrid{value: val, isSet: true}
}

func (v NullableGrid) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGrid) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


